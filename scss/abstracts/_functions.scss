// Convert pixels to rem
@function rem($pixels, $context: 16) {
  @return #{$pixels/$context}rem;
}

// Calculate fluid typography size
@function fluid-type($min-vw, $max-vw, $min-size, $max-size) {
  $slope: ($max-size - $min-size) / ($max-vw - $min-vw);
  $y-intersection: -1 * $min-vw * $slope + $min-size;
  
  @return clamp(
    #{$min-size}rem,
    #{$y-intersection}rem + #{$slope * 100}vw,
    #{$max-size}rem
  );
}

// Lighten color function
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// Darken color function
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// Z-index management
$z-indexes: (
  "modal": 1000,
  "overlay": 900,
  "dropdown": 800,
  "header": 700,
  "footer": 600
);

@function z($key) {
  @return map-get($z-indexes, $key);
}

// Spacing calculator
@function spacing($multiplier) {
  $base-spacing: 0.25rem;
  @return $base-spacing * $multiplier;
}

// Color palette generator
@function generate-palette($base-color, $steps: 5) {
  $palette: ();
  
  @for $i from 1 through $steps {
    $lighter: tint($base-color, (100 - ($i * 20)));
    $darker: shade($base-color, ($i * 20));
    
    $palette: map-merge($palette, (
      "lighter-#{$i}": $lighter,
      "darker-#{$i}": $darker
    ));
  }
  
  @return $palette;
}

// Calculate contrast ratio
@function contrast-ratio($color) {
  $luminance: 0.2126 * red($color) + 0.7152 * green($color) + 0.0722 * blue($color);
  
  @return if($luminance > 128, var(--color-text), white);
}

// Calculate aspect ratio
@function aspect-ratio($width, $height) {
  @return percentage($height / $width);
}

// Grid column calculator
@function grid-column($span, $total: 12) {
  @return percentage($span / $total);
}

// Media query breakpoint calculator
@function breakpoint($size) {
  $breakpoints: (
    "xs": 320px,
    "sm": 640px,
    "md": 768px,
    "lg": 1024px,
    "xl": 1280px,
    "2xl": 1536px
  );
  
  @return map-get($breakpoints, $size);
}

// Calculate golden ratio
@function golden-ratio($value, $increment) {
  $ratio: 1.618034;
  @return $value * pow($ratio, $increment);
}

// Power function for calculations
@function pow($base, $exponent) {
  $result: 1;
  
  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $result: $result * $base;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $result: $result / $base;
    }
  }
  
  @return $result;
}

// Calculate relative luminance
@function luminance($color) {
  $red: red($color) / 255;
  $green: green($color) / 255;
  $blue: blue($color) / 255;
  
  $red: if($red <= 0.03928, $red/12.92, pow(($red + 0.055)/1.055, 2.4));
  $green: if($green <= 0.03928, $green/12.92, pow(($green + 0.055)/1.055, 2.4));
  $blue: if($blue <= 0.03928, $blue/12.92, pow(($blue + 0.055)/1.055, 2.4));
  
  @return $red * 0.2126 + $green * 0.7152 + $blue * 0.0722;
}

// Calculate color contrast
@function color-contrast($background, $color1: white, $color2: black) {
  $background-luminance: luminance($background);
  $color1-luminance: luminance($color1);
  $color2-luminance: luminance($color2);
  
  $contrast1: abs($background-luminance - $color1-luminance);
  $contrast2: abs($background-luminance - $color2-luminance);
  
  @return if($contrast1 > $contrast2, $color1, $color2);
}